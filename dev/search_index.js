var documenterSearchIndex = {"docs":
[{"location":"intervention/","page":"Modelling interventions","title":"Modelling interventions","text":"CurrentModule = Epidemics","category":"page"},{"location":"intervention/","page":"Modelling interventions","title":"Modelling interventions","text":"This section shows how to set up and use the Npi struct to model interventions on social contacts.","category":"page"},{"location":"intervention/","page":"Modelling interventions","title":"Modelling interventions","text":"using Epidemics\nusing Gadfly\nusing DataFrames\n\n# an epidemic of 300 days\nsim_time_end = 500.0\n\n# population of 10 million in three age groups\npop = Population(\n    demography_vector = 10e6 .* [0.2, 0.5, 0.3],\n    initial_conditions = [1 - 1e-6 0.0 1e-6 0.0 0.0; 1 - 1e-6 0.0 1e-6 0.0 0.0; 1 - 1e-6 0.0 1e-6 0.0 0.0],\n    contact_matrix = ones(3, 3) * 5\n)","category":"page"},{"location":"intervention/","page":"Modelling interventions","title":"Modelling interventions","text":"# an intervention that reduces contacts by 50%, 20% and 60% for each age group\n# respectively\nintervention = Npi(\n    time_begin = 200, time_end = 230, \n    contact_reduction = [0.3, 0.1, 0.1]\n)\n\n# make model parameters using helpers\nr0 = 1.5\ninfectious_period = 7\npreinfectious_period = 2\n\nβ = r0_to_beta(r0 = r0, infectious_period = infectious_period)\nσ = preinfectious_period_to_alpha(preinfectious_period = preinfectious_period)\nγ = infectious_period_to_gamma(infectious_period = infectious_period)\n\n# run a model with no intervention or vaccination\ndata_baseline = epidemic_default(\n    β=[β], σ=[σ], γ=[γ],\n    population = pop,\n    time_end = sim_time_end, increment = 1.0\n)\n\n# run the default model with 3 age groups, intervention, no vaccination\ndata = epidemic_default(\n    β=[β], σ=[σ], γ=[γ],\n    population = pop,\n    intervention = intervention,\n    time_end = sim_time_end, increment = 1.0\n)\n\n# convert to dataframe\ndata_baseline = DataFrame(data_baseline[1])\ndata_output = DataFrame(data[1])\n\n# function to handle data with correct naming\ndata_baseline = prepare_data(data_baseline, n_age_groups = 3)\ndata_output = prepare_data(data_output, n_age_groups = 3)\n\n# assign scenario and combine\ndata_baseline[!, :scenario] .= \"baseline\"\ndata_output[!, :scenario] .= \"intervention\"\n\ndata = vcat(data_baseline, data_output)\n\n# filter data for infectious only\ndata_infectious = filter(:compartment => n -> n == \"infectious\", data)\n\nplot(\n    data_infectious, \n    x = \"timestamp\",\n    y = \"value\", \n    color = \"demo_group\",\n    linestyle = \"scenario\",\n    Geom.line,\n    Guide.xlabel(\"Time\"),\n    Guide.ylabel(\"Individuals infectious\"),\n    Guide.colorkey(\"Demographic group\"),\n    Scale.x_continuous(minvalue=100, maxvalue=500),\n    Theme(\n        key_position=:top\n    )\n)","category":"page"},{"location":"benchmarking/","page":"Benchmarking","title":"Benchmarking","text":"CurrentModule = Epidemics","category":"page"},{"location":"benchmarking/","page":"Benchmarking","title":"Benchmarking","text":"This section shows some benchmarking.","category":"page"},{"location":"benchmarking/","page":"Benchmarking","title":"Benchmarking","text":"using BenchmarkTools\nusing Epidemics\n\n# an epidemic of 500 days\ntime_end = 500.0\n\n# benchmark the default model with 3 age groups, intervention, and vaccination\n@benchmark epidemic_default(β=[1.3/7], σ=[0.5], γ=[1/7], population = Population(), time_end=time_end, increment=1.0)","category":"page"},{"location":"norovirus/","page":"Norovirus model","title":"Norovirus model","text":"CurrentModule = Epidemics","category":"page"},{"location":"norovirus/","page":"Norovirus model","title":"Norovirus model","text":"This section shows how to run the norovirus model with two levels of vaccination-derived protection against symptomatic disease.","category":"page"},{"location":"norovirus/","page":"Norovirus model","title":"Norovirus model","text":"using Epidemics\nusing Plots\n\n# all arguments have appropriate defaults\ndata = epidemic_norovirus()\n\n# plot exposed in unvaccinated group\nplot(data, vars=(0, 5:8))","category":"page"},{"location":"norovirus/","page":"Norovirus model","title":"Norovirus model","text":"# plot exposed in single-vaccinated group\nplot(data, vars=(0, 25:28))","category":"page"},{"location":"norovirus/","page":"Norovirus model","title":"Norovirus model","text":"# plot exposed in double-vaccinated group\nplot(data, vars=(0, 45:48))","category":"page"},{"location":"norovirus/#Benchmarking","page":"Norovirus model","title":"Benchmarking","text":"","category":"section"},{"location":"norovirus/","page":"Norovirus model","title":"Norovirus model","text":"using Epidemics\nusing BenchmarkTools\n\n@benchmark epidemic_norovirus()","category":"page"},{"location":"stochastic_model/","page":"Stochastic model","title":"Stochastic model","text":"CurrentModule = Epidemics","category":"page"},{"location":"stochastic_model/","page":"Stochastic model","title":"Stochastic model","text":"This section shows how to run the simple discrete-time, stochastic SIR compartmental model included in Epidemics.jl.","category":"page"},{"location":"stochastic_model/#Get-started-with-a-single-run","page":"Stochastic model","title":"Get started with a single run","text":"","category":"section"},{"location":"stochastic_model/","page":"Stochastic model","title":"Stochastic model","text":"Here we see how to use epidemic_stochastic() to run a single realisation of the stochastic model.","category":"page"},{"location":"stochastic_model/","page":"Stochastic model","title":"Stochastic model","text":"using Epidemics\nusing Gadfly\nusing DataFrames\nusing Random\n\n# end simulation time at 5.0 time units\nsim_time_end = 5.0\n\n# run the model with slightly modified parameters from the defaults\nRandom.seed!(1) # set a seed\n\ndata = epidemic_stochastic(\n    population_size = 1010,\n    n_infectious = 20, n_recovered = 30,\n    β = 9.9, σ = 1.01,\n    time_end = sim_time_end,\n    time_increment = 0.02\n)\n\n# pivot the data to long format and plot\ndata = stack(data, Not(:time))\nrename!(data, :variable => :compartment)\n\nplot(\n    data, \n    x = \"time\",\n    y = \"value\", \n    color = \"compartment\", \n    Geom.line,\n    Guide.xlabel(\"Time\"),\n    Guide.ylabel(\"Individuals\"),\n    Guide.colorkey(\"Compartment\"),\n    Theme(\n        key_position=:top\n    )\n)","category":"page"},{"location":"stochastic_model/#Run-multiple-replicates","page":"Stochastic model","title":"Run multiple replicates","text":"","category":"section"},{"location":"stochastic_model/","page":"Stochastic model","title":"Stochastic model","text":"Here we see how to use run_replicates() to run a multiple realisations of the stochastic model in epidemic_stochastic().","category":"page"},{"location":"stochastic_model/","page":"Stochastic model","title":"Stochastic model","text":"run_replicates() takes the function name (such as epidemic_stochastic), the number of replicates, and any number of function arguments for the epidemic model function.","category":"page"},{"location":"stochastic_model/","page":"Stochastic model","title":"Stochastic model","text":"Here, we run 100 replicates of the stochastic model, passing the same arguments as in the previous example.","category":"page"},{"location":"stochastic_model/","page":"Stochastic model","title":"Stochastic model","text":"using Epidemics\nusing Gadfly\nusing DataFrames\nusing Random\n\n# end simulation time at 5.0 time units\nsim_time_end = 5.0\n\n# run the model with slightly modified parameters from the defaults\nRandom.seed!(1) # set a seed\n\ndata = run_replicates(\n    epidemic_stochastic, 100,\n    population_size = 1010,\n    n_infectious = 20, n_recovered = 30,\n    β = 9.9, σ = 1.01,\n    time_end = sim_time_end,\n    time_increment = 0.01\n)\n\nplot(\n    data, \n    x = \"time\",\n    y = \"value\", \n    color = \"compartment\",\n    group = \"replicate\",\n    Geom.line,\n    alpha=[0.1],\n    Guide.xlabel(\"Time\"),\n    Guide.ylabel(\"Individuals\"),\n    Guide.colorkey(\"Compartment\"),\n    Coord.cartesian(ymin=0, ymax=1000),\n    Theme(\n        key_position=:top\n    )\n)","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Epidemics","category":"page"},{"location":"#Epidemics.jl","page":"Home","title":"Epidemics.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This is some minimal documentation for Epidemics.jl. Note that this is a personal project, and comes with no current or future support. This documentation section is intended as a learning experience (for me) in writing Julia package documentation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: License:MIT) (Image: Project Status: WIP – Initial development is in progress, but there has not yet been a stable, usable release suitable for the public.) (Image: Dev) (Image: Build Status) (Image: Coverage) (Image: SciML Code Style)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Epidemics.jl is a Julia package that aims to mirror the R package {epidemics}, and to provide a robust way to model epidemic and disease outbreak scenarios. Epidemics.jl is a work in progress since it lags the development of epidemics.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note Epidemics.jl is a personal project where I aim to learn more about the Julia language; it comes with no guarantees of current or future support or maintenance.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Epidemics.jl currently has basic implementations of three models, roughly tracking the R package {epidemics}.","category":"page"},{"location":"","page":"Home","title":"Home","text":"epidemic_default(): the default model, which is an SEIRV compartmental ODE model allowing for a vaccination regime that confers full immunity with a single dose, as well as (optionally) multiple overlapping interventions to reduce social contacts;\nepidemic_vacamole(): the Vacamole model developed by RIVM for the Covid-19 pandemic, which is a work in progress, but will eventually allow for two-dose leaky vaccination, as well as multiple overlapping interventions;\nepidemic_stochastic(): A simple stochastic compartmental SIR model.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Epidemics.jl is likely to include the Ebola model, as well as features such as time-dependence and rate interventions, from {epidemics} at some point.","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Documentation","page":"Home","title":"Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [Epidemics]","category":"page"},{"location":"#Epidemics.Npi","page":"Home","title":"Epidemics.Npi","text":"Npi(timebegin, timeend, contact_reduction)\n\nA structure to hold the end points and strength of a non-pharmaceutical intervention.\n\n\n\n\n\n","category":"type"},{"location":"#Epidemics.Population","page":"Home","title":"Epidemics.Population","text":"Population(name, demographyvector, initialconditions, contact_matrix)\n\nA structure to hold population characteristics, including:\n\n'name': A name for the population.\n'demography_vector': A numeric vector of the number of individuals in each\n\nage or demographic group of the population.\n\n'initial_conditions': A numeric matrix representing the proportions of each\n\nage or demographic group that are in one of the epidemiological compartments.\n\n'contact_matrix': A matrix giving the contacts between the demographic groups\n\nin the population. Must be a square matrix.\n\n\n\n\n\n","category":"type"},{"location":"#Epidemics.Vaccination","page":"Home","title":"Epidemics.Vaccination","text":"Vaccination(timebegin, timeend, ν)\n\nA structure to hold the end points and strength of a non-pharmaceutical intervention.\n\n\n\n\n\n","category":"type"},{"location":"#Epidemics.default_contact_matrix-Tuple{}","page":"Home","title":"Epidemics.default_contact_matrix","text":"default_contact_matrix(; n_groups=3)\n\nCreate a uniform contact matrix.\n\nNamed Arguments\n\nn_groups: A Number for the number of demographic groups in the population.\n\nReturns\n\nA matrix of ones with the dimensions n_groups * n_groups.\n\n\n\n\n\n","category":"method"},{"location":"#Epidemics.default_initial_conditions-Tuple{}","page":"Home","title":"Epidemics.default_initial_conditions","text":"default_initial_conditions(; n_groups=3, p_infected=[1e-6, 1e-6, 1e-6],\n    p_exposed=[0.0, 0.0, 0.0])\n\nCreate some useful initial conditions for the default SEIRV epidemic model.\n\nNamed Arguments\n\nn_groups: A Number for the number of demographic groups in the population.\np_infected: The proportion of each demographic group that is infected and   also infectious. This is expected to be a Vector of Numbers with each   value between 0.0 and 1.0.\np_exposed: The proportion of each demographic group that is exposed but not   yet infectious. This is expected to be a Vector of Numbers with each   value between 0.0 and 1.0.\n\nReturns\n\nA matrix with the dimensions n_groups * 5, with each row representing a     demographic groups and each column representing one of the five     epidemiological compartments of the default model.\n\n\n\n\n\n","category":"method"},{"location":"#Epidemics.epidemic_default-Tuple{}","page":"Home","title":"Epidemics.epidemic_default","text":"epidemic_default(β, σ, γ,\n    population, intervention, vaccination,\n    time_end, increment\n)\n\nModel the progression of an epidemic, with age- or demographic-group specific contact patterns and proportions, non-pharmaceutical interventions with group- specific effects, and group-specific vaccination regimes.\n\nArguments\n\nβ: the transmission rate beta of the disease; may be a numeric Vector;\nσ: the rate of transition from the exposed to the infectious compartment   sigma; may be a numeric Vector;\nγ: the recovery rate gamma; may be a numeric Vector.\npopulation: A Population with population characteristics, importantly   including a contact matrix describing group-specific social contacts, and   a dmeography vector describing the number of individuals in each demographic   group;\nintervention: An Npi for interventions on social contacts;\nvaccination: A Vaccination for the vaccination regime applied;\ntime_end: The time in days at which to end the simulation, defaults to 200;\nincrement: The increment in simulation time, defaults to 1.0.\n\n\n\n\n\n","category":"method"},{"location":"#Epidemics.epidemic_default_ode!-NTuple{4, Any}","page":"Home","title":"Epidemics.epidemic_default_ode!","text":"epidemic_default_ode!(du, u, parameters, t)\n\nA simple SEIRV epidemic model function that allows for multiple demographic groups. This function is intended to be called internally from epidemic_default.\n\nThe function expects the parameters argument to be a four element vector or tuple with the following elements (which do not have to be named):\n\na prepared contact_matrix, see Population;\nbeta, the transmission rate;\nsigma, the rate of conversion from exposed to infectious;\ngamma, the rate of recovery;\na matrix specifying the contacts between demographic groups;\nan Npi object specifying the intervention applied to each age\n\ngroup, see Npi;\n\na Vaccination object, see Vaccination;\n\n\n\n\n\n","category":"method"},{"location":"#Epidemics.epidemic_norovirus-Tuple{}","page":"Home","title":"Epidemics.epidemic_norovirus","text":"epidemic_norovirus(initial_state, contacts, aging, sigma, phi, upsilon,\n    rho, w1, w2, delta, q1, q2, b, d, epsilon, psi, gamma, n_age_groups,\n    time_end, increment\n)\n\nModel the progression of a norovirus epidemic with multiple optional vaccination strata.\n\n\n\n\n\n","category":"method"},{"location":"#Epidemics.epidemic_norovirus_ode!-NTuple{4, Any}","page":"Home","title":"Epidemics.epidemic_norovirus_ode!","text":"epidemic_norovirus_ode!(du, u, parameters, t)\n\nThe ODE system for the norovirus model. This function is intended to be called     internally from epidemic_norovirus.    \n\n\n\n\n\n","category":"method"},{"location":"#Epidemics.epidemic_stochastic-Tuple{}","page":"Home","title":"Epidemics.epidemic_stochastic","text":"epidemic_stochastic(; population_size, n_infectious, \n    n_recovered, β, σ, time_end, time_increment\n)\n\nRun a stochastic, discrete-time, compartmental epidemic model with the compartments \"susceptible\", \"infectious\", and     \"recovered\".\n\nNamed arguments\n\npopulation_size::Number: The total population size. Defaults to 1000.\nn_infectious::Number: The number of initially infected individuals. Defaults to 10.\nn_recovered::Number: The number of initially recovered individuals. Defaults to 0.\nβ::Number: The transmission rate of the infection (denoted beta). Defaults to 10.0.\nσ::Number: The recovery rate of the infection (denoted sigma, often also denoted gamma).   Defaults to 1.0.\ntime_end::Number: The time point at which to end the simulation. Defaults to 5.0.\ntime_increment::Number: The increment in model time. Defaults to 0.01.\n\nReturns\n\nA DataFrame with four columns, \"time\", \"susceptible\", \"infectious\", and \"recovered\", for the values     of each compartment at each time point in the simulation. The number of rows should be     roughly equal to time_end / time_increment (and the initial conditions).\n\nExamples\n\n# with default arguments\nepidemic_stochastic()\n\n# with some user-sepcified named arguments\nepidemic_stochastic(population_size=5000, n_infectious=119,\n    β=9.9, σ=1.1\n)\n\n\n\n\n\n","category":"method"},{"location":"#Epidemics.epidemic_vacamole-Tuple{}","page":"Home","title":"Epidemics.epidemic_vacamole","text":"epidemic_vacamole(β, σ, γ, η, ω, βv, ηv, ωv,\n    population, intervention, vaccination,\n    time_end, increment\n)\n\nModel the progression of an epidemic, with age- or demographic-group specific contact patterns and proportions, non-pharmaceutical interventions with group- specific effects, and group-specific vaccination regimes.\n\nThe Vacamole model was developed by RIVM, and is particularly useful for modelling leaky, two-dose vaccination.\n\nArguments\n\nβ: the transmissibility of the disease;\nσ: the rate of transition from the exposed to the infectious compartment;\nγ: the recovery rate;\nη: the hospitalisation rate;\nω: the mortality rate;\nβv: the transmissibility for fully (doubly) vaccinated individuals;\nηv: the hospitalisation rate for fully vaccinated individuals;\nωv: the mortality rate for fully vaccinated individuals;\npopulation: A Population with population characteristics, which must have\n\n11 compartments in the initial conditions;\n\nintervention: An Npi for interventions on social contacts;\nvaccination: A Vaccination for the vaccination regime applied;\ntime_end: The time in days at which to end the simulation, defaults to 200;\nincrement: The increment in simulation time, defaults to 1.0.\n\n\n\n\n\n","category":"method"},{"location":"#Epidemics.epidemic_vacamole_ode!-NTuple{4, Any}","page":"Home","title":"Epidemics.epidemic_vacamole_ode!","text":"epidemic_vacamole_ode!(du, u, parameters, t)\n\nAn epidemic model adapted from the Vacamole model developed by RIVM, the Dutch public health agency, to model the effect of leaky, two-dose vaccination on the Covid-19 pandemic (Ainslie et al. 2022).\n\nThis adaptation implements leaky two-dose vaccination, as well as allowing for \"hospitalised\" and \"dead\" compartments. Individuals who have been doubly vaccinated can be modelled as having lower susceptibility to infection, and lower hospitalisation and mortality rates.\n\nThe model also allows for multiple demographic groups and interventions. This function is intended to be called internally from epidemic_vacamole.\n\nThe function expects the parameters argument to be a four element vector or tuple with the following elements (which do not have to be named):\n\na Population object with a prepared contact matrix, see [Population]\n\n(@ref);\n\nbeta, the baseline transmission rate;\nbeta_v, the transmission rate for doubly vaccinated individuals;\nalpha, the rate of conversion from exposed to infectious;\neta, the baseline hospitalisation rate;\neta_v, the hospitalisation rate for doubly vaccinated individuals;\nomega, the baseline mortality rate;\nomega_v, the mortality rate for doubly vaccinated individuals;\ngamma, the rate of recovery;\na matrix specifying the contacts between demographic groups;\nan Npi object specifying the intervention applied to each age group, see Npi;\na Vaccination object, see Vaccination;\n\n\n\n\n\n","category":"method"},{"location":"#Epidemics.infectious_period_to_gamma-Tuple{}","page":"Home","title":"Epidemics.infectious_period_to_gamma","text":"infectious_period_to_gamma(; infectious_period)\n\nCalculate the recovery rate of the infection gamma from the infectious period.\n\nNamed Arguments\n\ninfectious_period: A single number for the mean duration in days that   individuals are infectious.\n\nReturns\n\nA single number representing the recovery rate of the infectious gamma\n\n\n\n\n\n","category":"method"},{"location":"#Epidemics.make_combinations-Tuple","page":"Home","title":"Epidemics.make_combinations","text":"make_combinations(v...)\n\nMake combinations of input vectors.\n\nArguments\n\nv...: Any number of input Vectors.\n\nReturns\n\nA Vector of tuples with combinations of Vectors passed in v.... If all vectors in v... have the same length, returns a vector of tuples of length 1. Combinations are returned in ascending order of the elements of each i-th element of the input vectors.\n\nExample\n\n```julia vec1 = [1, 2, 3] vec2 = [\"a\", \"b\"]\n\nresult = make_combinations(vec1, vec2)\n\nnote order of results\n\nprintln(result)\n\n\n\n\n\n","category":"method"},{"location":"#Epidemics.preinfectious_period_to_alpha-Tuple{}","page":"Home","title":"Epidemics.preinfectious_period_to_alpha","text":"preinfectious_period_to_alpha(; r0, preinfectious_period)\n\nCalculate the rate of transition from the 'exposed' to the 'infectious' compartment, alpha from the mean period between exposure and the initial occurrence of symptoms.\n\nNamed Arguments\n\npreinfectious_period: A single number for the mean duration in days between   individuals being exposed to infection and becoming infectious.\n\nReturns\n\nA single number representing the transmission rate of the infectious alpha\n\n\n\n\n\n","category":"method"},{"location":"#Epidemics.prepare_contact_matrix-Tuple{}","page":"Home","title":"Epidemics.prepare_contact_matrix","text":"prepare_contact_matrix(; population)\n\nPrepare a population contact matrix for an epidemic model.\n\nNamed Arguments\n\npopulation: A Population object with information about the population   affected by the epidemic. Must include a contact matrix, and   a demography vector.\n\nReturns\n\nA matrix of ones with the dimensions n_groups * n_groups.\n\n\n\n\n\n","category":"method"},{"location":"#Epidemics.prepare_initial_conditions-Tuple{}","page":"Home","title":"Epidemics.prepare_initial_conditions","text":"prepare_initial_conditions(; population)\n\nPrepare initial conditions from a Population object.\n\nNamed Arguments\n\npopulation: A Population object with information about the population   affected by the epidemic. Must include a matrix of initial conditions, and   a demography vector.\n\nReturns\n\nA matrix with the initial conditions scaled by the demography vector.\n\n\n\n\n\n","category":"method"},{"location":"#Epidemics.r0_to_beta-Tuple{}","page":"Home","title":"Epidemics.r0_to_beta","text":"r0_to_beta(; r0, infectious_period)\n\nCalculate the transmission rate beta from the basic reproductive number R_0 and the mean infectious period.\n\nNamed Arguments\n\nr0: A single number for the basic reproduction number of an infection;\ninfectious_period: A single number for the mean duration in days that    individuals are infectious.\n\nReturns\n\nA single number representing the transmission rate of the infection beta\n\n\n\n\n\n","category":"method"},{"location":"#Epidemics.run_replicates","page":"Home","title":"Epidemics.run_replicates","text":"runreplicates(modelfn, replicates; args...)\n\nRun any model function multiple times while passing keyword arguments. Especially     useful for capturing uncertainty due to randomness in stochastic models.\n\nArguments\n\nmodel_fn::Function: A model function. Defaults to epidemic_stochastic() but       may be any model function from this or another package.\nreplicates::Number: The number of replicates. Defaults to 100.\n\nNamed arguments\n\nargs...: Any extra arguments; these are typically arguments intended to be   passed to model_fn.\n\nReturns\n\nA DataFrame in long format with four columns, \"time\", \"compartment\", \"value\",     and \"replicate\", for the values of each compartment at each time point in     each replicate of the simulation run by model_fn.\n\nExamples\n\n# pass some arguments to epidemic_stochastic()\nrun_replicates(epidemic_stochastic, 100,\n    population_size=1000, n_infectious=10,\n    β=10, σ=1\n)\n\n\n\n\n\n","category":"function"},{"location":"epidemics/","page":"Get started","title":"Get started","text":"CurrentModule = Epidemics","category":"page"},{"location":"epidemics/#Installing-Epidemics.jl","page":"Get started","title":"Installing Epidemics.jl","text":"","category":"section"},{"location":"epidemics/","page":"Get started","title":"Get started","text":"Epidemics.jl can be installed from GitHub using the Julia package manager Pkg.jl.","category":"page"},{"location":"epidemics/","page":"Get started","title":"Get started","text":"using Pkg\nPkg.add(url=\"git@github.com:pratikunterwegs/Epidemics.jl.git\")","category":"page"},{"location":"epidemics/#Running-the-default-model","page":"Get started","title":"Running the default model","text":"","category":"section"},{"location":"epidemics/","page":"Get started","title":"Get started","text":"using Epidemics\nusing Gadfly\nusing DataFrames\n\n# an epidemic of 500 days\nsim_time_end = 500.0\n\n# population of 10 million in three age groups\npop = Population(\n    demography_vector = 10e6 .* [0.2, 0.5, 0.3],\n    initial_conditions = [1 - 1e-6 0.0 1e-6 0.0 0.0; 1 - 1e-6 0.0 1e-6 0.0 0.0; 1 - 1e-6 0.0 1e-6 0.0 0.0],\n    contact_matrix = ones(3, 3) * 5\n)\n\n# make model parameters using helpers\nr0 = 1.5\ninfectious_period = 7\npreinfectious_period = 2\n\nβ = r0_to_beta(r0 = r0, infectious_period = infectious_period)\nσ = preinfectious_period_to_alpha(preinfectious_period = preinfectious_period)\nγ = infectious_period_to_gamma(infectious_period = infectious_period)\n\n# run the default model with 3 age groups, but no intervention or vaccination\ndata = epidemic_default(\n    β=[β], σ=[σ], γ=[γ],\n    population = pop,\n    time_end = sim_time_end, increment=1.0\n)\n\n# convert to dataframe\n# NOTE that due to vectorisation, the output is a vector of DataFrames\ndata_output = DataFrame(data[1])\n\n# WIP - function to handle data with correct naming\ndata_output = prepare_data(data_output, n_age_groups = 3)\n\n# filter data for infectious only\ndata_infectious = filter(:compartment => n -> n == \"infectious\", data_output)\n\nplot(\n    data_infectious, \n    x = \"timestamp\",\n    y = \"value\", \n    color = \"demo_group\", \n    Geom.line,\n    Guide.xlabel(\"Time\"),\n    Guide.ylabel(\"Individuals infectious\"),\n    Guide.colorkey(\"Demographic group\"),\n    Scale.x_continuous(minvalue=100, maxvalue=500),\n    Theme(\n        key_position=:top\n    )\n)","category":"page"}]
}
